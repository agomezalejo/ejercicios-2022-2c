## Preguntas

1. # Abstracción de los tests 01 y 02 

En los test 01 y 02 hay código repetido. Cuando lo extrajeron crearon algo nuevo. Eso es algo que estaba en la realidad y no estaba representado en nuestro código, por eso teníamos código repetido. ¿Cuál es esa entidad de la realidad que crearon?

2. # Cómo representar en Smalltalk

¿Cuáles son las formas en que podemos representar entes de la realidad en Smalltalk que conocés? Es decir, ¿qué cosas del lenguaje Smalltalk puedo usar para representar entidades de la realidad?

3. # Teoría de Naur

¿Qué relación hay entre sacar código repetido (creando abstracciones) y la teoría del modelo/sistema (del paper de Naur)?

## Respuestas

1. No, no creamos algo nuevo. Usamos los mensajes de la clase TestCase de Smalltalk que sirvieron para remover el codigo repetido. Al usar implementaciones ya existentes en el entorno, evitamos posibles problemas de implementación, por no testear todos los casos bordes.
Ademas creamos nuevas abstracciones con metodos que reutilizamos en diferentes lugares, donde antes había codigo repetido.

2. Las formas de representar entes de la realidad que nos provee Smalltalk son los objetos, mensajes, clases e instancias. Siendo las clases una abstracción de las ideas de la realidad, que nos permiten instanciar objetos para modelar entes puntuales, y a su vez a través de los mensajes que pueden enviarse entre dichos objetos podemos modelar la forma en que se relacionan entre si y con el entorno que los rodea. 

3. La relación que encontramos entre la práctica de sacar código repetido y la teoría detallada en el paper de Naur es que para poder llegar a encontrar abstracciones útiles que nos permitan simplificar y/o eliminar las repeticiones se necesita primero formar una teoría sobre el código en cuestión. Dicha teoría no responde a una serie de pasos a seguir o a una suerte de documentación, sino al conocimiento adquirido por el programador al momento de trabajar en el desarrollo del programa. Esta teoría es la que nos permite encontrar soluciones acordes y reescribir nuestro código de una manera más legible y que siga cumpliendo con sus funcionalidades.